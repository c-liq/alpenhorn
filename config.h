#ifndef ALPENHORN_CONFIG_H
#define ALPENHORN_CONFIG_H
#include <sodium.h>

static const char pbc_params[] = "type f\n"
    "q 16283262548997601220198008118239886027035269286659395419233331082106632227801\n"
    "r 16283262548997601220198008118239886026907663399064043451383740756301306087801\n"
    "b 5609134383314096343821706060255766178230076423505829753232013255731730969768\n"
    "beta 14585451571835279174057707111090228078498559752534690688696725860687037093655\n"
    "alpha0 7384246685346944302521498672963794600906063696465161604937782621154370513339\n"
    "alpha1 4048507381538522394091069408895150360561946621565222584287381102665313783955\n";

static const char *sk[] = {"10778343094975392135581974247340460372164289692929233030125470550571339685912",
                           "9688549132935229128161053765094784437559599536117169899827480125341223824030",
                           "14754489302236821884533158176717016782900034847354657195783194213647848389200"
};

static const char *pk[] =
    {"[[6086379828989660989028314078811395552519168740126492884410228417657741197505, 8144852052844972129099269274667998534513045130276301011761818051955232294764], [12905311036091495766560354314955717180785052939814771374732216405908083158588, 12206468764955976902377549492754113261152529825339665500250747177941759322877]]",
     "[[8160164483073707263225494293658012847814401105023844402795912842754138236016, 3507539360481855979953507669121673921828426608186041809832896241678538524487], [2935004434206231188893390984062827282093819072637730926703958281099939979728, 1429257052468430779387305210231691157810800546837261775958933730699263478158]]",
     "[[13390979854465689884004374630321832512410728995089304572891318452815493144503, 11615922255584207485349740186764476249491844309988473417920830909660991527655], [11775135681555340005729773445724583755638324261572440444821270512920972679189, 21057092324234584843398020514715179172990825209983929208054184231184362858]]"};

static const char bls_generator[] = "[[15724257330924097062160683695880250933232554430187007470915263732860196404841,"
    " 11675890099551911688180980551831034403007152045230694854797640069104655082534], "
    "[13349283408131010710625633177944918626847137179157740569651489234485272434916,"
    " 14614450416672873406836739706484919090526432906183872742307134718470620099277]]";

static const char ibe_gen_g3[] =
    "[13445309910996477276498115007761070335613715482521447244233072900478772718670, 1756633159976726073430018948123414634726480138612936748031091597585345575016]";

#define crypto_ghash_BYTES crypto_generichash_BYTES
#define crypto_maxhash_BYTES crypto_generichash_BYTES_MAX
#define crypto_MACBYTES crypto_aead_chacha20poly1305_ietf_ABYTES
#define crypto_NBYTES crypto_aead_chacha20poly1305_ietf_NPUBBYTES
// PBC constants
#define g1_elem_compressed_BYTES 33U
#define g2_elem_compressed_BYTES 65U

#define intent_BYTES 4U
#define mailbox_BYTES 4U
#define dialling_round_BYTES 4U
#define af_round_BYTES 4U
#define dialling_token_BYTES 32U
#define num_pkg_servers 1U
#define num_mix_servers 2U
#define user_id_BYTES 60U

#define af_request_BYTES (user_id_BYTES + crypto_sign_PUBLICKEYBYTES + crypto_sign_BYTES + g1_elem_compressed_BYTES + crypto_box_PUBLICKEYBYTES + dialling_round_BYTES)
#define af_ibeenc_request_BYTES (af_request_BYTES + crypto_ghash_BYTES + g1_elem_compressed_BYTES)
#define onion_layer_BYTES (crypto_aead_chacha20poly1305_ietf_NPUBBYTES + crypto_aead_chacha20poly1305_ietf_KEYBYTES + crypto_aead_chacha20poly1305_IETF_ABYTES)
#define onionenc_friend_request_BYTES (mailbox_BYTES + af_ibeenc_request_BYTES + (num_mix_servers * onion_layer_BYTES))
#define onionenc_dial_token_BYTES (mailbox_BYTES + dialling_token_BYTES + (num_mix_servers * onion_layer_BYTES))
#define cli_pkg_single_auth_req_BYTES (crypto_sign_BYTES + crypto_box_PUBLICKEYBYTES)
#define cli_pkg_combined_auth_req_BYTES (user_id_BYTES + (num_pkg_servers * cli_pkg_single_auth_req_BYTES))
#define pkg_auth_res_BYTES (g1_elem_compressed_BYTES + g2_elem_compressed_BYTES)
#define pkg_enc_auth_res_BYTES (pkg_auth_res_BYTES + crypto_MACBYTES + crypto_NBYTES)
#define pkg_broadcast_msg_BYTES (g1_elem_compressed_BYTES + crypto_box_PUBLICKEYBYTES)
#define pkg_sig_message_BYTES (user_id_BYTES + crypto_box_PUBLICKEYBYTES + af_round_BYTES)

#define initial_table_size 50U

#endif //ALPENHORN_CONFIG_H
