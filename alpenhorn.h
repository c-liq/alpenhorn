#ifndef ALPENHORN_ALPENHORN_H
#define ALPENHORN_ALPENHORN_H
#include <stddef.h>
#include <pbc/pbc.h>
#include <pbc/pbc_test.h>
#include <sodium.h>
typedef unsigned char byte_t;
typedef struct element_s element_s;
typedef struct pairing_s pairing_s;

void printhex(char *msg, byte_t *data, uint32_t len);

static const char *sk[] = {"10778343094975392135581974247340460372164289692929233030125470550571339685912",
                    "9688549132935229128161053765094784437559599536117169899827480125341223824030",
                    "14754489302236821884533158176717016782900034847354657195783194213647848389200"
};

static const char *pk[] =
    {"[[6086379828989660989028314078811395552519168740126492884410228417657741197505, 8144852052844972129099269274667998534513045130276301011761818051955232294764], [12905311036091495766560354314955717180785052939814771374732216405908083158588, 12206468764955976902377549492754113261152529825339665500250747177941759322877]]",
     "[[8160164483073707263225494293658012847814401105023844402795912842754138236016, 3507539360481855979953507669121673921828426608186041809832896241678538524487], [2935004434206231188893390984062827282093819072637730926703958281099939979728, 1429257052468430779387305210231691157810800546837261775958933730699263478158]]",
     "[[13390979854465689884004374630321832512410728995089304572891318452815493144503, 11615922255584207485349740186764476249491844309988473417920830909660991527655], [11775135681555340005729773445724583755638324261572440444821270512920972679189, 21057092324234584843398020514715179172990825209983929208054184231184362858]]"};

static const char GENERATOR[] = "[[15724257330924097062160683695880250933232554430187007470915263732860196404841,"
    " 11675890099551911688180980551831034403007152045230694854797640069104655082534], "
    "[13349283408131010710625633177944918626847137179157740569651489234485272434916,"
    " 14614450416672873406836739706484919090526432906183872742307134718470620099277]]";
#define pbc_sig_length 32U
#define num_pkg_servers 1U
#define num_mix_servers 1U
#define af_email_string_bytes 60U
#define af_request_ABYTES (crypto_aead_chacha20poly1305_ietf_NPUBBYTES + crypto_aead_chacha20poly1305_ietf_KEYBYTES + crypto_aead_chacha20poly1305_IETF_ABYTES)

#define bls_signature_length 32U
#define bls_public_key_length 65U
#define ibe_public_key_length 33U
#define ibe_secret_key_length 65U
#define pkg_auth_res_length (bls_signature_length + ibe_secret_key_length)
#define pkg_encr_auth_re_length (pkg_auth_res_length + crypto_aead_chacha20poly1305_ietf_ABYTES + crypto_aead_chacha20poly1305_ietf_NPUBBYTES)
#define broadcast_message_length (ibe_public_key_length + crypto_box_PUBLICKEYBYTES)
#define round_sig_message_length (af_email_string_bytes + crypto_box_PUBLICKEYBYTES + sizeof (uint32_t))

void decrypt_request(byte_t *c, size_t len);

#endif //ALPENHORN_ALPENHORN_H
